CREATE TABLE TBL_STUDENT(
	ID NUMBER CONSTRAINT PK_SUTDENT PRIMARY KEY,
	STUDENT_NAME VARCHAR2(255) NOT NULL
);

/*TBL_STUDENT 테이블에서 ID와 STUDENT_NAME 전체 조회*/
SELECT ID, STUDENT_NAME FROM TBL_STUDENT;

/*ID는 1, NAME은 한동석 값 삽입*/
INSERT INTO TBL_STUDENT (ID, STUDENT_NAME)
VALUES(1, '한동석');

/*ID가 1인 NAME을 홍길동으로 변경*/
UPDATE TBL_STUDENT
SET STUDENT_NAME ='홍길동'
WHERE ID = 1;

/*TBL_SUTUDET에서 ID가 1인 데이터 삭제*/
DELETE FROM TBL_STUDENT
WHERE ID = 1;

/*동물원*/
CREATE TABLE TBL_ZOO(
   ID NUMBER CONSTRAINT PK_ZOO PRIMARY KEY,
   ZOO_NAME VARCHAR2(255),
   ZOO_ADDRESS VARCHAR2(255),
   ZOO_ADDRESS_DETAIL VARCHAR2(255),
   ZOO_MAX_ANIMAL NUMBER DEFAULT 0
);

/*동물*/
CREATE TABLE TBL_ANIMAL(
   ID NUMBER CONSTRAINT PK_ANIMAL PRIMARY KEY,
   ANIMAL_NAME VARCHAR2(255),
   ANIMAL_TYPE VARCHAR2(255),
   ANIMAL_AGE NUMBER DEFAULT 0,
   ANIMAL_HEIGHT NUMBER(16, 5),
   ANIMAL_WEIGHT NUMBER(16, 5),
   ZOO_ID NUMBER,
   CONSTRAINT FK_ANIMAL_ZOO FOREIGN KEY(ZOO_ID)
   REFERENCES TBL_ZOO(ID)
);
ALTER TABLE TBL_ANIMAL MODIFY(ANIMAL_HEIGHT NUMBER(16,5));
ALTER TABLE TBL_ANIMAL MODIFY(ANIMAL_WEIGHT NUMBER(16,5));

/*알아서 매번 다음 SEQUENCE를 가져와준다. */
/*시퀀스를 직접 만들어서 사용해야 한다.*/
CREATE SEQUENCE SEQ_ZOO;


SELECT * FROM TBL_ZOO;
INSERT INTO TBL_ZOO
VALUES(SEQ_ZOO.NEXTVAL, '서울랜드', '서울', '랜드', 100);

INSERT INTO TBL_ZOO
VALUES(SEQ_ZOO.NEXTVAL, '에버랜드', '경기', '용인', 500);

UPDATE TBL_ZOO 
SET ZOO_MAX_ANIMAL  = 5000
WHERE ZOO_NAME = '에버랜드';

DELETE FROM TBL_ZOO
WHERE ID = 1;

CREATE SEQUENCE SEQ_ANIMAL;
SELECT * FROM TBL_ANIMAL;
INSERT INTO TBL_ANIMAL 
VALUES(SEQ_ANIMAL.NEXTVAL, '사자', '맹수',3,87.5,120.242,2);

INSERT INTO TBL_ANIMAL 
VALUES(SEQ_ANIMAL.NEXTVAL, '악어', '도마뱀',12,300.5,180.242,2);

/*에버랜드(2) 동물원의 동물만 조회*/
SELECT ID ,ANIMAL_NAME ,ANIMAL_TYPE ,ANIMAL_AGE ,ANIMAL_HEIGHT ,ANIMAL_WEIGHT ,ZOO_ID 
FROM TBL_ANIMAL
WHERE ZOO_ID =2;

/****************************************************************************************************************************/
/****************************************************************************************************************************/
/****************************************************************************************************************************/
/*<구현>*/
CREATE TABLE TBL_USER(
	ID NUMBER CONSTRAINT PK_USER PRIMARY KEY,
	USER_ID VARCHAR2(1000) CONSTRAINT UK_USER UNIQUE NOT NULL,
	USER_PASSWORD VARCHAR2(1000) NOT NULL,
	USER_NAME VARCHAR2(1000) NOT NULL,
	USER_ADDRESS VARCHAR2(1000) NOT NULL,
	USER_EMAIL VARCHAR2(1000) NOT NULL,
	USER_BIRTHDAY DATE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE TBL_ORDER(
	ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
	ORDER_DATE DATE DEFAULT CURRENT_TIMESTAMP,
	USER_ID NUMBER,
	CONSTRAINT FK_ORDER_USER FOREIGN KEY(USER_ID)
    REFERENCES TBL_USER(ID),
    PRODUCT_ID NUMBER,
    CONSTRAINT FK_ORDER_PRODUCT FOREIGN KEY(PRODUCT_ID)
    REFERENCES TBL_PRODUCT(ID)
);

CREATE TABLE TBL_PRODUCT(
	ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
	PRODUCT_NAME VARCHAR(2000) NOT NULL,
	PRODUCT_PRICE NUMBER DEFAULT 0,
	PRODUCT_INVENTORY NUMBER DEFAULT 0
);


/*각 테이블에 3개 이상씩 정보를 추가하고, 조회한다*/
/*수정 2회*/
/*삭제 2회*/
CREATE SEQUENCE SEQ_USER;
SELECT * FROM TBL_USER;
INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'DDDDD', '1111', '상훈', '서울 강남', 'SEKKF@GMAIL.COM', '2001-11-11');
INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'AEFEF', '2222', '길동', '강원도', 'QGEQRF@GMAIL.COM', '2010-01-03');
INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'ADFASDF', '3333', '야호', '충청북도', 'CNDQNR@GMAIL.COM', '3000-11-23');

UPDATE TBL_USER 
SET USER_ID ='AAAAA'
WHERE ID = 1;
UPDATE TBL_USER 
SET USER_ADDRESS ='하와이'
WHERE ID = 2;

DELETE FROM TBL_USER
WHERE ID = 3;

/*사용하고 있는 PRODUCT가 있어서 삭제 불가*/
DELETE FROM TBL_USER
WHERE ID = 1;


CREATE SEQUENCE SEQ_PRODUCT;
SELECT * FROM TBL_PRODUCT;
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL,'상품1', 20000, 300);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL,'상품2', 50500, 100);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL,'상품3', 13100, 200);


CREATE SEQUENCE SEQ_ORDER;
SELECT * FROM TBL_ORDER;
INSERT INTO TBL_ORDER
VALUES(SEQ_ORDER.NEXTVAL, '2000-10-16', '1','2');
INSERT INTO TBL_ORDER
VALUES(SEQ_ORDER.NEXTVAL, '2000-10-18', '1','3');
INSERT INTO TBL_ORDER
VALUES(SEQ_ORDER.NEXTVAL, '2000-11-18', '2','2');

/****************************************************************************************************************************/
/****************************************************************************************************************************/
/****************************************************************************************************************************/
/****************************************************************************************************************************/
/****************************************************************************************************************************/
/****************************************************************************************************************************/
/**********************************************************************/
CREATE SEQUENCE SEQ_OWNER;
CREATE SEQUENCE SEQ_PET;

CREATE TABLE TBL_OWNER(
   ID NUMBER CONSTRAINT PK_OWNER PRIMARY KEY,
   OWNER_NAME VARCHAR2(255) NOT NULL,
   OWNER_AGE NUMBER,
   OWNER_PHONE VARCHAR2(255) NOT NULL,
   OWNER_ADDRESS VARCHAR2(255)
);

CREATE TABLE TBL_PET(
   ID NUMBER CONSTRAINT PK_PET PRIMARY KEY,
   PET_ILL_NAME VARCHAR2(255),
   PET_NAME VARCHAR2(255),
   PET_AGE NUMBER,
   WEIGHT NUMBER(4, 2),
   OWNER_ID NUMBER,
   CONSTRAINT FK_PET_OWNER FOREIGN KEY(OWNER_ID)
   REFERENCES TBL_OWNER(ID)
);

INSERT INTO TBL_OWNER
(ID, OWNER_NAME, OWNER_AGE, OWNER_PHONE, OWNER_ADDRESS)
VALUES(SEQ_OWNER.NEXTVAL, '한동석', 20, '01012341234', '경기도');
INSERT INTO TBL_OWNER
(ID, OWNER_NAME, OWNER_AGE, OWNER_PHONE, OWNER_ADDRESS)
VALUES(SEQ_OWNER.NEXTVAL, '홍길동', 37, '01087879898', '서울');
INSERT INTO TBL_OWNER
(ID, OWNER_NAME, OWNER_AGE, OWNER_PHONE, OWNER_ADDRESS)
VALUES(SEQ_OWNER.NEXTVAL, '이순신', 50, '01044445555', '대구');

SELECT ID, OWNER_NAME, OWNER_AGE, OWNER_PHONE, OWNER_ADDRESS 
FROM TBL_OWNER;

INSERT INTO TBL_PET
(ID, PET_ILL_NAME, PET_NAME, PET_AGE, WEIGHT, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '장염', '뽀삐', 4, 10.45, 1);
INSERT INTO TBL_PET
(ID, PET_ILL_NAME, PET_NAME, PET_AGE, WEIGHT, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '감기', '달구', 12, 14.25, 1);
INSERT INTO TBL_PET
(ID, PET_ILL_NAME, PET_NAME, PET_AGE, WEIGHT, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '탈골', '댕댕', 7, 8.46, 1);
INSERT INTO TBL_PET
(ID, PET_ILL_NAME, PET_NAME, PET_AGE, WEIGHT, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '염좌', '쿠키', 11, 5.81, 1);
INSERT INTO TBL_PET
(ID, PET_ILL_NAME, PET_NAME, PET_AGE, WEIGHT, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '충치', '바둑', 1, 3.47, 1);

SELECT ID, PET_ILL_NAME, PET_NAME, PET_AGE, WEIGHT, OWNER_ID
FROM TBL_PET;

/*몸무게가 8kg 미만인 반려동물들의 주인에게 모두 전화를 해야한다*/
SELECT PET_ILL_NAME, PET_NAME, WEIGHT, OWNER_ID, O.OWNER_NAME, O.OWNER_PHONE
FROM TBL_OWNER O JOIN TBL_PET P
ON O.ID = P.OWNER_ID AND WEIGHT < 8;

/*이순신이 키우는 반려동물의 병명을 조회한다. */
SELECT PET_ILL_NAME,PET_NAME
FROM TBL_OWNER O JOIN TBL_PET P
ON O.ID = P.OWNER_ID AND O.OWNER_NAME = '이순신';

/*나이가 5살보다 많은 반려동물의 주인 전체 정보를 조회한다.*/
SELECT DISTINCT OWNER_NAME, OWNER_AGE, OWNER_PHONE, OWNER_ADDRESS 
FROM TBL_OWNER O JOIN TBL_PET P
ON O.ID = P.OWNER_ID AND P.PET_AGE > 5;


/*나이가 5살보다 많은 반려동물의 주인 전체 정보를 조회한다.*/
SELECT 
   TBL_OWNER.ID, TBL_OWNER.OWNER_NAME, TBL_OWNER.OWNER_AGE, 
   TBL_OWNER.OWNER_PHONE, TBL_OWNER.OWNER_ADDRESS,
   TBL_PET.PET_NAME, TBL_PET.PET_AGE
FROM TBL_OWNER JOIN TBL_PET
ON TBL_OWNER.ID = TBL_PET.OWNER_ID AND TBL_PET.PET_AGE > 5;

/*AS: 알리아스(별칭)
 * 
 * 테이블명 혹은 컬럼명 뒤에 AS를 붙여서 원하는 이름을 설정할 수 있다.
 * 이후부터는 설정한 이름으로 사용하면 된다.
 * SELECT절에는 AS를 작성해도 괜찮지만, FROM절에서는 AS를 작성하면 안된다.
 * 이럴 때에는 AS자리에 띄어쓰기 후 작성하도록 한다.
 * 
 * */
SELECT 
   O.ID "주인 번호", O.OWNER_NAME "SELECT", O.OWNER_AGE, 
   O.OWNER_PHONE, O.OWNER_ADDRESS,
   P.PET_NAME, P.PET_AGE
FROM TBL_OWNER O JOIN TBL_PET P 
ON O.ID = P.OWNER_ID AND P.PET_AGE > 5;

/*CONCATENATION: 연결
 * 
 * "안" + "녕": JAVA
 * '안' || '녕': ORACLE
 * 
 * */

SELECT O.OWNER_NAME || '님의 반려동물은 ' || P.PET_NAME || '입니다.' AS 자기소개
FROM TBL_OWNER O JOIN TBL_PET P
ON O.ID = P.OWNER_ID;

/*
 * LIKE: 포함된 문자열 값을 찾고, 문자의 개수도 제한을 줄 수 있다.
 *
 * %: 모든 것
 * _: 글자 수
 * 
 * 예시
 * '%A'   : A로 끝나는 모든 값
 * 'A%'   : A로 시작하는 모든 값
 * 'A__': A로 시작하면서 3글자인 값
 * '_A'   : A로 끝나면서 2글자인 값
 * '%A%': A가 포함된 값 
 * 
 * */

SELECT * FROM TBL_PET;
/*반려동물 이름에서 '뽀'가 포함된 반려동물의 주인 정보 조회*/
SELECT O.OWNER_NAME ,O.OWNER_AGE ,O.OWNER_PHONE ,O.OWNER_ADDRESS 
FROM TBL_OWNER O JOIN TBL_PET P
ON O.ID = P.OWNER_ID AND P.PET_NAME LIKE '%댕%';

/*핸드폰 번호에 '0101234'로 시작하는 주인의 반려동물 전체 조회*/
SELECT P.PET_NAME,P.PET_ILL_NAME ,P.PET_AGE ,P.WEIGHT 
FROM TBL_OWNER O JOIN TBL_PET P
ON O.ID = P.OWNER_ID AND O.OWNER_PHONE LIKE '0101234%';

/*반려동물 병명에 '염'이 들어가있지 않는 반려동물 전체 정보 조회*/
SELECT P.PET_NAME,P.PET_ILL_NAME ,P.PET_AGE ,P.WEIGHT 
FROM TBL_OWNER O JOIN TBL_PET P
ON O.ID = P.OWNER_ID AND P.PET_ILL_NAME NOT LIKE '%염%';























